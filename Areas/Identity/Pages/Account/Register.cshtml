@page
@model RegisterModel
@{
    ViewData["Title"] = "Register - TixWave";
    Layout = "_AuthLayout";
    ViewData["OverlayTitle"] = "Join TixWave Today";
    ViewData["OverlaySubtitle"] = "Experience the future of event booking with exclusive access to premium events.";
}

<!-- Form Header -->
<div class="form-header">
    <h1 class="form-title">Welcome to TixWave</h1>
    <p class="form-subtitle">Fast, easy, and secure ticket booking at your fingertips.</p>
</div>

<!-- Display Server Messages -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <i class='bx bx-error-circle'></i>
        Please correct the following errors:
        <ul class="mb-0 mt-2">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        <i class='bx bx-error-circle'></i>
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        <i class='bx bx-check-circle'></i>
        @TempData["SuccessMessage"]
    </div>
}

<!-- Register Form -->
<form method="post">
    @Html.AntiForgeryToken()

    <!-- Name Fields Row -->
    <div class="form-row">
        <!-- First Name -->
        <div class="form-group half">
            @Html.LabelFor(m => m.Input.FirstName, new { @class = "form-label" })
            <div class="position-relative">
                <i class="bx bx-user input-icon"></i>
                @Html.TextBoxFor(m => m.Input.FirstName, new
                {
                    @class = "form-control",
                    placeholder = "First Name",
                    required = "required"
                })
            </div>
            @Html.ValidationMessageFor(m => m.Input.FirstName, "", new { @class = "text-danger" })
        </div>

        <!-- Last Name -->
        <div class="form-group half">
            @Html.LabelFor(m => m.Input.LastName, new { @class = "form-label" })
            <div class="position-relative">
                <i class="bx bx-user input-icon"></i>
                @Html.TextBoxFor(m => m.Input.LastName, new
                {
                    @class = "form-control",
                    placeholder = "Last Name",
                    required = "required"
                })
            </div>
            @Html.ValidationMessageFor(m => m.Input.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <!-- Username Field -->
    <div class="form-group">
        @Html.LabelFor(m => m.Input.Username, new { @class = "form-label" })
        <div class="position-relative">
            <i class="bx bx-at input-icon"></i>
            @Html.TextBoxFor(m => m.Input.Username, new
            {
                @class = "form-control",
                placeholder = "Choose a unique username",
                required = "required"
            })
        </div>
        @Html.ValidationMessageFor(m => m.Input.Username, "", new { @class = "text-danger" })
    </div>

    <!-- Email & User Role Row -->
    <div class="form-row">
        <!-- Email -->
        <div class="form-group half">
            @Html.LabelFor(m => m.Input.Email, new { @class = "form-label" })
            <div class="position-relative">
                <i class="bx bx-envelope input-icon"></i>
                @Html.TextBoxFor(m => m.Input.Email, new
                {
                    @class = "form-control",
                    type = "email",
                    placeholder = "Enter your email address",
                    autocomplete = "email",
                    required = "required"
                })
            </div>
            @Html.ValidationMessageFor(m => m.Input.Email, "", new { @class = "text-danger" })
        </div>

        <!-- User Role -->
        @* <div class="form-group half"> *@
        @*     @Html.LabelFor(m => m.Input.UserRole, new { @class = "form-label" }) *@
        @*     <div class="position-relative"> *@
        @*         <i class='bx bx-user-circle input-icon'></i> *@
        @*         @Html.DropDownListFor(m => m.Input.UserRole, new SelectList(new List<object> { *@
        @*             new { Value = "", Text = "Select User Type" }, *@
        @*             new { Value = "Client", Text = "Client" }, *@
        @*             new { Value = "Event Organizer", Text = "Event Organizer" } *@
        @*         }, "Value", "Text"), new {  *@
        @*             @class = "form-control",  *@
        @*             @required = "required" *@
        @*         }) *@
        @*     </div> *@
        @*     @Html.ValidationMessageFor(m => m.Input.UserRole, "", new { @class = "text-danger" }) *@
        @* </div> *@
    </div>

    <!-- Contact & NIC Row -->
    <div class="form-row">
        <!-- Contact Number -->
        <div class="form-group half">
            @Html.LabelFor(m => m.Input.ContactNo, new { @class = "form-label" })
            <div class="position-relative">
                <i class="bx bx-phone input-icon"></i>
                @Html.TextBoxFor(m => m.Input.ContactNo, new
                {
                    @class = "form-control",
                    placeholder = "0771234567",
                    maxlength = "10",
                    required = "required"
                })
            </div>
            @Html.ValidationMessageFor(m => m.Input.ContactNo, "", new { @class = "text-danger" })
        </div>

        <!-- NIC -->
        @* <div class="form-group half"> *@
        @*     @Html.LabelFor(m => m.Input.NIC, new { @class = "form-label" }) *@
        @*     <div class="position-relative"> *@
        @*         <i class='bx bx-id-card input-icon'></i> *@
        @*         @Html.TextBoxFor(m => m.Input.NIC, new {  *@
        @*             @class = "form-control",  *@
        @*             @placeholder = "123456789V or 199912345678", *@
        @*             @required = "required" *@
        @*         }) *@
        @*     </div> *@
        @*     @Html.ValidationMessageFor(m => m.Input.NIC, "", new { @class = "text-danger" }) *@
        @* </div> *@
    </div>

    <!-- Password Field -->
    <div class="form-group">
        @Html.LabelFor(m => m.Input.Password, new { @class = "form-label" })
        <div class="position-relative">
            <i class="bx bx-lock-alt input-icon"></i>
            @Html.PasswordFor(m => m.Input.Password, new
            {
                @class = "form-control",
                placeholder = "Create a strong password",
                autocomplete = "new-password",
                required = "required"
            })
            <button type="button" class="password-toggle" title="Show password">
                <i class="bx bx-hide"></i>
            </button>
        </div>
        @Html.ValidationMessageFor(m => m.Input.Password, "", new { @class = "text-danger" })
    </div>

    <!-- Confirm Password Field -->
    <div class="form-group">
        @Html.LabelFor(m => m.Input.ConfirmPassword, new { @class = "form-label" })
        <div class="position-relative">
            <i class="bx bx-lock input-icon"></i>
            @Html.PasswordFor(m => m.Input.ConfirmPassword, new
            {
                @class = "form-control",
                placeholder = "Confirm your password",
                autocomplete = "new-password",
                required = "required"
            })
            <button type="button" class="password-toggle" title="Show password">
                <i class="bx bx-hide"></i>
            </button>
        </div>
        @Html.ValidationMessageFor(m => m.Input.ConfirmPassword, "", new { @class = "text-danger" })
    </div>

    <!-- Terms and Conditions -->
    <div class="form-check">
        @Html.CheckBoxFor(m => m.Input.AgreeToTerms, new { @class = "form-check-input", required = "required" })
        @Html.LabelFor(m => m.Input.AgreeToTerms, new { @class = "form-check-label" })
        @Html.ValidationMessageFor(m => m.Input.AgreeToTerms, "", new { @class = "text-danger" })
    </div>

    <!-- Submit Button -->
    <button type="submit" class="submit-btn">
        <i class="bx bx-user-plus"></i>
        Create Account
    </button>
</form>

<!-- Form Links -->
<div class="form-links">
    <span>Already have an account?</span>
    <a href="@Url.Page("/Account/Login")">Sign In</a>
</div>

@section OverlayFeatures {
    <li>
        <i class="bx bx-check"></i>
        <span>Loyalty points & rewards</span>
    </li>
    <li>
        <i class="bx bx-check"></i>
        <span>Early bird discounts</span>
    </li>
}