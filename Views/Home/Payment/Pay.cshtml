@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Payment";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Payment.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
}

<div class="payment-container">
    <div class="payment-card">
        <div class="header">
            <h1>Secure Payment</h1>
            <p>Complete your payment securely</p>
        </div>

        <form id="paymentForm" class="payment-form">
            <div class="form-group">
                <label for="cardName">Card Holder Name</label>
                <input type="text" id="cardName" name="cardName" placeholder="Enter full name as on card" required>
            </div>

            <div class="form-group">
                <label for="cardNumber">Card Number</label>
                <input type="text" id="cardNumber" name="cardNumber" placeholder="1234 5678 9012 3456" maxlength="19"
                       required>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="expiryDate">Expiry Date</label>
                    <input type="text" id="expiryDate" name="expiryDate" placeholder="MM/YY" maxlength="5" required>
                </div>

                <div class="form-group">
                    <label for="cvv">CVV</label>
                    <input type="text" id="cvv" name="cvv" placeholder="123" maxlength="4" required>
                </div>
            </div>

            <!-- Promo Code Section -->
            <div class="promo-section">
                <div class="promo-input-group">
                    <input type="text" id="promoCode" name="promoCode" placeholder="Enter promo code"
                           class="promo-input">
                    <button type="button" id="applyPromoBtn" class="apply-promo-btn">
                        <span>Apply</span>
                    </button>
                </div>
                <div id="promoMessage" class="promo-message"></div>
            </div>

            <!-- Loyalty Points Section -->
            <div class="loyalty-section" id="loyaltySection" style="display: none;">
                <div class="loyalty-info">
                    <div class="loyalty-balance">
                        <span class="loyalty-label">Available Points:</span>
                        <span class="loyalty-points" id="availablePoints">0</span>
                    </div>
                    <div class="loyalty-usage">
                        <label class="loyalty-checkbox">
                            <input type="checkbox" id="useLoyaltyPoints">
                            <span class="checkmark"></span>
                            <span class="loyalty-text">Use loyalty points</span>
                        </label>
                        <input type="number" id="loyaltyPointsToUse" class="loyalty-input" placeholder="Points to use"
                               min="0" disabled>
                    </div>
                </div>
            </div>

            <div class="amount-section">
                <div class="amount-breakdown">
                    <div class="amount-row">
                        <span class="amount-label">Subtotal:</span>
                        <span class="amount-value" id="subtotalAmount">LKR 0</span>
                    </div>
                    <div class="amount-row" id="discountRow" style="display: none;">
                        <span class="amount-label">Discount:</span>
                        <span class="amount-value discount" id="discountAmount">-LKR 0</span>
                    </div>
                    <div class="amount-row" id="loyaltyRow" style="display: none;">
                        <span class="amount-label">Loyalty Points:</span>
                        <span class="amount-value discount" id="loyaltyDiscountAmount">-LKR 0</span>
                    </div>
                    <div class="amount-divider"></div>
                    <div class="amount-row total">
                        <span class="amount-label">Total Amount:</span>
                        <span class="amount-value" id="totalAmount">LKR 0</span>
                    </div>
                </div>
            </div>

            <button type="submit" class="pay-button" id="payButton">
                <span id="payButtonText">Pay Now</span>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M5 12h14M12 5l7 7-7 7"/>
                </svg>
            </button>

            <div class="security-info">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <circle cx="12" cy="16" r="1"/>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                </svg>
                <span>Your payment information is encrypted and secure</span>
            </div>
        </form>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="paymentToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="bi bi-shield-check text-success me-2"></i>
            <strong class="me-auto">Payment Status</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            <!-- Message will be inserted here -->
        </div>
    </div>
</div>

<!-- QR Code Modal -->
<div class="modal fade" id="qrCodeModal" tabindex="-1" aria-labelledby="qrCodeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="qrCodeModalLabel">
                    <i class="bi bi-qr-code me-2"></i>
                    Your Tickets
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="success-icon mb-3">
                    <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                </div>
                <h4 class="text-success mb-3">Payment Successful!</h4>
                <p class="text-muted mb-4">Your tickets have been generated. Download your QR codes below:</p>

                <div class="qr-codes-container" id="qrCodesContainer">
                    <!-- QR codes will be generated here -->
                </div>

                <div class="booking-details mt-4">
                    <div class="row">
                        <div class="col-6">
                            <strong>Booking ID:</strong>
                            <p id="bookingId" class="text-primary">BK001234</p>
                        </div>
                        <div class="col-6">
                            <strong>Event:</strong>
                            <p id="eventName">Summer Music Festival 2025</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="downloadAllBtn">
                    <i class="bi bi-download me-2"></i>
                    Download All QR Codes
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.js"></script>

    <script>
        // Initialize toast
        const paymentToast = new bootstrap.Toast(document.getElementById('paymentToast'));

        // Global variables for payment calculations
        let originalAmount = 0;
        let discountAmount = 0;
        let loyaltyDiscountAmount = 0;
        let appliedPromoCode = null;
        let loyaltyPointsToUse = 0;
        let availableLoyaltyPoints = 0;

        // Load booking data from server session
        document.addEventListener('DOMContentLoaded', function () {
            // Get booking data from ViewBag
            const bookingData = @Html.Raw(Json.Serialize(ViewBag.BookingData));
            
            if (!bookingData || !bookingData.selectedSeats || bookingData.selectedSeats.length === 0) {
                alert('No booking data found. Please start the booking process again.');
                window.location.href = '/';
                return;
            }

            // Set original amount
            originalAmount = bookingData.totalAmount || 0;

            // Update the amount displays
            document.getElementById('subtotalAmount').textContent = `LKR ${originalAmount.toLocaleString()}`;
            document.getElementById('totalAmount').textContent = `LKR ${originalAmount.toLocaleString()}`;

            // Load user loyalty points
            loadUserLoyaltyPoints();

            // Initialize event listeners
            initializePromoCodeHandlers();
            initializeLoyaltyPointsHandlers();
        });

        // Format card number with spaces
        document.getElementById('cardNumber').addEventListener('input', function (e) {
            let value = e.target.value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
            let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
            e.target.value = formattedValue;
        });

        // Format expiry date
        document.getElementById('expiryDate').addEventListener('input', function (e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length >= 2) {
                value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
            e.target.value = value;
        });

        // Only allow numbers for CVV
        document.getElementById('cvv').addEventListener('input', function (e) {
            e.target.value = e.target.value.replace(/[^0-9]/g, '');
        });

        // Load user loyalty points
        async function loadUserLoyaltyPoints() {
            try {
                const response = await fetch('/Home/GetUserLoyaltyPoints', {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    availableLoyaltyPoints = result.loyaltyPoints || 0;
                    document.getElementById('availablePoints').textContent = availableLoyaltyPoints.toLocaleString();

                    // Show loyalty section if user has points
                    if (availableLoyaltyPoints > 0) {
                        document.getElementById('loyaltySection').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading loyalty points:', error);
            }
        }

        // Initialize promo code handlers
        function initializePromoCodeHandlers() {
            const applyPromoBtn = document.getElementById('applyPromoBtn');
            const promoCodeInput = document.getElementById('promoCode');

            applyPromoBtn.addEventListener('click', applyPromoCode);

            promoCodeInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    applyPromoCode();
                }
            });
        }

        // Apply promo code
        async function applyPromoCode() {
            const promoCode = document.getElementById('promoCode').value.trim();
            const applyBtn = document.getElementById('applyPromoBtn');
            const promoMessage = document.getElementById('promoMessage');

            if (!promoCode) {
                showPromoMessage('Please enter a promo code', 'error');
                return;
            }

            // Show loading state
            applyBtn.disabled = true;
            applyBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Applying...';

            try {
                const response = await fetch('/Home/ValidatePromoCode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({promoCode: promoCode, amount: originalAmount})
                });

                const result = await response.json();

                if (result.success) {
                    appliedPromoCode = result.promoCode;
                    discountAmount = result.discountAmount;
                    showPromoMessage(result.message, 'success');
                    updateAmountDisplay();
                } else {
                    showPromoMessage(result.message, 'error');
                }
            } catch (error) {
                console.error('Error applying promo code:', error);
                showPromoMessage('Error applying promo code. Please try again.', 'error');
            } finally {
                // Reset button state
                applyBtn.disabled = false;
                applyBtn.innerHTML = '<span>Apply</span>';
            }
        }

        // Initialize loyalty points handlers
        function initializeLoyaltyPointsHandlers() {
            const useLoyaltyCheckbox = document.getElementById('useLoyaltyPoints');
            const loyaltyPointsInput = document.getElementById('loyaltyPointsToUse');

            useLoyaltyCheckbox.addEventListener('change', function () {
                loyaltyPointsInput.disabled = !this.checked;
                if (!this.checked) {
                    loyaltyPointsInput.value = '';
                    loyaltyDiscountAmount = 0;
                    loyaltyPointsToUse = 0;
                    updateAmountDisplay();
                }
            });

            loyaltyPointsInput.addEventListener('input', function () {
                const pointsToUse = parseInt(this.value) || 0;
                const maxPoints = Math.min(pointsToUse, availableLoyaltyPoints);

                if (pointsToUse > availableLoyaltyPoints) {
                    this.value = maxPoints;
                }

                loyaltyPointsToUse = parseInt(this.value) || 0;
                loyaltyDiscountAmount = Math.floor(loyaltyPointsToUse / 100); // 1 point = 1 LKR (100 points = 1 LKR)
                updateAmountDisplay();
            });
        }

        // Show promo message
        function showPromoMessage(message, type) {
            const promoMessage = document.getElementById('promoMessage');
            promoMessage.textContent = message;
            promoMessage.className = `promo-message ${type}`;
            promoMessage.style.display = 'block';

            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    promoMessage.style.display = 'none';
                }, 5000);
            }
        }

        // Update amount display
        function updateAmountDisplay() {
            const totalAmount = originalAmount - discountAmount - loyaltyDiscountAmount;
            const totalAmountElement = document.getElementById('totalAmount');
            const discountRow = document.getElementById('discountRow');
            const loyaltyRow = document.getElementById('loyaltyRow');

            // Update discount row
            if (discountAmount > 0) {
                document.getElementById('discountAmount').textContent = `-LKR ${discountAmount.toLocaleString()}`;
                discountRow.style.display = 'flex';
            } else {
                discountRow.style.display = 'none';
            }

            // Update loyalty row
            if (loyaltyDiscountAmount > 0) {
                document.getElementById('loyaltyDiscountAmount').textContent = `-LKR ${loyaltyDiscountAmount.toLocaleString()}`;
                loyaltyRow.style.display = 'flex';
            } else {
                loyaltyRow.style.display = 'none';
            }

            // Update total amount
            totalAmountElement.textContent = `LKR ${Math.max(0, totalAmount).toLocaleString()}`;
        }

        // Payment form submission
        document.getElementById('paymentForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const payButton = document.getElementById('payButton');
            const payButtonText = document.getElementById('payButtonText');
            const toastMessage = document.getElementById('toastMessage');

            // Show loading state
            payButton.disabled = true;
            payButtonText.textContent = 'Processing...';
            payButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Processing...';

            try {
                // Get form data
                const formData = new FormData(this);
                const finalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace(/[^\d.]/g, ''));
                
                // Get booking data from server session (already available in ViewBag)
                const bookingData = @Html.Raw(Json.Serialize(ViewBag.BookingData));
                
                // Add URL parameters to form data for payment processing
                const urlParams = new URLSearchParams(window.location.search);
                formData.append('Amount', finalAmount);
                formData.append('OriginalAmount', originalAmount);
                formData.append('DiscountAmount', discountAmount);
                formData.append('LoyaltyDiscountAmount', loyaltyDiscountAmount);
                formData.append('LoyaltyPointsUsed', loyaltyPointsToUse);
                
                // Add booking data from URL parameters
                formData.append('eventId', urlParams.get('eventId') || '');
                formData.append('selectedSeats', urlParams.get('selectedSeats') || '');
                formData.append('selectedTickets', urlParams.get('selectedTickets') || '');
                formData.append('totalAmount', urlParams.get('totalAmount') || '');
                
                if (appliedPromoCode) {
                    formData.append('PromoCode', appliedPromoCode.PromoCode);
                }

                // Process payment
                const response = await fetch('/Home/ProcessPayment', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    // Show success toast with loyalty points info
                    let message = result.message;
                    if (result.loyaltyPointsEarned > 0) {
                        message += ` You earned ${result.loyaltyPointsEarned} loyalty points!`;
                    }
                    toastMessage.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>' + message;
                    document.querySelector('.toast-header i').className = 'bi bi-check-circle-fill text-success me-2';
                    paymentToast.show();

                    // Store ticket information in session storage
                    if (result.ticketIds && result.ticketIds.length > 0) {
                        sessionStorage.setItem('createdTicketIds', JSON.stringify(result.ticketIds));
                        sessionStorage.setItem('createdQRCodes', JSON.stringify(result.qrCodes));
                        sessionStorage.setItem('bookingId', result.bookingId);
                    }

                    // Generate and show QR codes
                    setTimeout(() => {
                        generateQRCodes(result.qrCodes || [result.qrCode]);
                        showQRCodeModal();
                    }, 1500);

                } else {
                    // Show error toast
                    toastMessage.innerHTML = '<i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>' + result.message;
                    document.querySelector('.toast-header i').className = 'bi bi-exclamation-triangle-fill text-danger me-2';
                    paymentToast.show();
                }

            } catch (error) {
                console.error('Payment error:', error);
                toastMessage.innerHTML = '<i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>An error occurred. Please try again.';
                document.querySelector('.toast-header i').className = 'bi bi-exclamation-triangle-fill text-danger me-2';
                paymentToast.show();
            } finally {
                // Reset button state
                payButton.disabled = false;
                payButtonText.textContent = 'Pay Now';
                payButton.innerHTML = '<span>Pay Now</span><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M5 12h14M12 5l7 7-7 7" /></svg>';
            }
        });

        // Generate QR codes
        function generateQRCodes(qrCodes) {
            const container = document.getElementById('qrCodesContainer');
            container.innerHTML = '';

            // Get booking data from server session
            const bookingData = @Html.Raw(Json.Serialize(ViewBag.BookingData));
            const selectedSeats = bookingData.selectedSeats || [];
            const ticketIds = JSON.parse(sessionStorage.getItem('createdTicketIds') || '[]');

            if (selectedSeats.length === 0) {
                container.innerHTML = '<p class="text-muted">No seats selected</p>';
                return;
            }

            // Generate QR codes for each selected seat
            selectedSeats.forEach((seat, index) => {
                const qrDiv = document.createElement('div');
                qrDiv.className = 'qr-code-item mb-3';
                qrDiv.innerHTML = `
                    <div class="qr-code-wrapper">
                        <canvas id="qr-seat-${index}" class="qr-canvas"></canvas>
                        <div class="qr-info">
                            <h6>Seat ${seat.id}</h6>
                            <p class="text-muted small">Price: LKR ${seat.price.toLocaleString()}</p>
                            <p class="text-muted small">Ticket ID: #${ticketIds[index] || 'N/A'}</p>
                            <button class="btn btn-sm btn-outline-primary" onclick="downloadQR('qr-seat-${index}', 'Seat-${seat.id}')">
                                <i class="bi bi-download"></i> Download
                            </button>
                            <button class="btn btn-sm btn-outline-success ms-2" onclick="viewTicketSummary(${ticketIds[index]})">
                                <i class="bi bi-eye"></i> View Details
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(qrDiv);

                // Generate QR code
                const canvas = document.getElementById(`qr-seat-${index}`);
                const qrData = qrCodes[index] || qrCodes[0]; // Use specific QR code or fallback to first

                QRCode.toCanvas(canvas, qrData, {
                    width: 150,
                    height: 150,
                    margin: 2,
                    color: {
                        dark: '#000000',
                        light: '#FFFFFF'
                    }
                });
            });
        }

        // Show QR code modal
        function showQRCodeModal() {
            const modal = new bootstrap.Modal(document.getElementById('qrCodeModal'));
            modal.show();

            // Update booking details
            document.getElementById('bookingId').textContent = 'BK' + Math.random().toString(36).substr(2, 6).toUpperCase();
            document.getElementById('eventName').textContent = 'Summer Music Festival 2025';
        }

        // Download individual QR code
        function downloadQR(canvasId, filename) {
            const canvas = document.getElementById(canvasId);
            const link = document.createElement('a');
            link.download = `${filename}.png`;
            link.href = canvas.toDataURL();
            link.click();
        }

        // Download all QR codes
        document.getElementById('downloadAllBtn').addEventListener('click', function () {
            const canvases = document.querySelectorAll('.qr-canvas');
            const selectedSeats = JSON.parse(sessionStorage.getItem('selectedSeats') || '[]');

            canvases.forEach((canvas, index) => {
                setTimeout(() => {
                    const link = document.createElement('a');
                    const seatId = selectedSeats[index] ? selectedSeats[index].id : `Seat-${index + 1}`;
                    link.download = `${seatId}-Ticket.png`;
                    link.href = canvas.toDataURL();
                    link.click();
                }, index * 500); // Stagger downloads
            });
        });

        // View ticket summary
        function viewTicketSummary(ticketId) {
            window.open(`/Home/QRSummary?ticketId=${ticketId}`, '_blank');
        }

        // Redirect to dashboard when modal is closed
        document.getElementById('qrCodeModal').addEventListener('hidden.bs.modal', function () {
            setTimeout(() => {
                window.location.href = '/Home/Dashboard';
            }, 1000);
        });
    </script>
}