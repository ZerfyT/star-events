@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "QR Code Scanner";
}

@section Styles {
    <link rel="stylesheet" href="~/css/QRScan.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
}

<div class="scanner-container">
    <div class="scanner-card">
        <div class="scanner-header">
            <div class="header-icon">
                <i class="bi bi-qr-code-scan"></i>
            </div>
            <h1>Security Scanner</h1>
            <p class="header-subtitle">Scan QR codes to validate tickets</p>
        </div>

        <div class="scanner-content">
            <!-- Manual QR Code Input -->
            <div class="manual-input-section">
                <div class="input-group">
                    <input type="text" id="qrCodeInput" class="form-control" placeholder="Enter QR code or scan with camera" autocomplete="off">
                    <button class="btn btn-primary" id="validateBtn" type="button">
                        <i class="bi bi-search"></i> Validate
                    </button>
                </div>
            </div>

            <!-- Camera Scanner Section -->
            <div class="camera-section">
                <div class="camera-container">
                    <video id="video" autoplay muted playsinline style="display: none;"></video>
                    <canvas id="canvas" style="display: none;"></canvas>
                    <div id="cameraPlaceholder" class="camera-placeholder">
                        <i class="bi bi-camera"></i>
                        <p>Camera not available</p>
                        <p class="small">Use manual input above</p>
                    </div>
                </div>
                <div class="camera-controls">
                    <button id="startCameraBtn" class="btn btn-outline-primary">
                        <i class="bi bi-camera"></i> Start Camera
                    </button>
                    <button id="stopCameraBtn" class="btn btn-outline-secondary" style="display: none;">
                        <i class="bi bi-camera-video-off"></i> Stop Camera
                    </button>
                </div>
            </div>

            <!-- Scan Results -->
            <div id="scanResults" class="scan-results" style="display: none;">
                <div class="result-header">
                    <h3>Scan Result</h3>
                </div>
                <div id="resultContent" class="result-content">
                    <!-- Results will be displayed here -->
                </div>
            </div>

            <!-- Recent Scans -->
            <div class="recent-scans">
                <h4>Recent Scans</h4>
                <div id="recentScansList" class="recent-scans-list">
                    <!-- Recent scans will be displayed here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="scanToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="bi bi-info-circle text-primary me-2"></i>
            <strong class="me-auto">Scan Result</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            <!-- Message will be inserted here -->
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    
    <script>
        let video = null;
        let canvas = null;
        let context = null;
        let isScanning = false;
        let recentScans = JSON.parse(localStorage.getItem('recentScans') || '[]');

        // Initialize toast
        const scanToast = new bootstrap.Toast(document.getElementById('scanToast'));

        document.addEventListener('DOMContentLoaded', function() {
            video = document.getElementById('video');
            canvas = document.getElementById('canvas');
            context = canvas.getContext('2d');

            // Initialize event listeners
            document.getElementById('validateBtn').addEventListener('click', validateQRCode);
            document.getElementById('qrCodeInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    validateQRCode();
                }
            });
            document.getElementById('startCameraBtn').addEventListener('click', startCamera);
            document.getElementById('stopCameraBtn').addEventListener('click', stopCamera);

            // Load recent scans
            loadRecentScans();
        });

        async function validateQRCode() {
            const qrCodeInput = document.getElementById('qrCodeInput');
            const qrCode = qrCodeInput.value.trim();

            if (!qrCode) {
                showToast('Please enter a QR code', 'error');
                return;
            }

            try {
                const response = await fetch(`/api/qr/validate/${encodeURIComponent(qrCode)}`);
                const result = await response.json();

                if (result.success && result.isValid) {
                    // Show ticket details
                    displayScanResult(result.ticket);
                    
                    // Add to recent scans
                    addToRecentScans(qrCode, result.ticket);
                    
                    showToast('Ticket validated successfully', 'success');
                } else {
                    showToast(result.message || 'Invalid QR code', 'error');
                    displayErrorResult(result.message || 'Invalid QR code');
                }
            } catch (error) {
                console.error('Error validating QR code:', error);
                showToast('Error validating QR code', 'error');
                displayErrorResult('Error validating QR code');
            }
        }

        function displayScanResult(ticket) {
            const resultsDiv = document.getElementById('scanResults');
            const resultContent = document.getElementById('resultContent');
            
            const statusClass = ticket.isScanned ? 'scanned' : 'valid';
            const statusText = ticket.isScanned ? 'Already Scanned' : 'Valid Ticket';
            const statusIcon = ticket.isScanned ? 'bi-check-circle-fill text-warning' : 'bi-check-circle-fill text-success';

            resultContent.innerHTML = `
                <div class="ticket-info">
                    <div class="ticket-status ${statusClass}">
                        <i class="bi ${statusIcon}"></i>
                        <span>${statusText}</span>
                    </div>
                    <div class="ticket-details">
                        <div class="detail-row">
                            <label>Event:</label>
                            <span>${ticket.eventTitle}</span>
                        </div>
                        <div class="detail-row">
                            <label>Ticket Type:</label>
                            <span>${ticket.ticketType}</span>
                        </div>
                        <div class="detail-row">
                            <label>Event Time:</label>
                            <span>${new Date(ticket.eventStartTime).toLocaleString()}</span>
                        </div>
                        ${ticket.isScanned ? `
                        <div class="detail-row">
                            <label>Scanned At:</label>
                            <span>${new Date(ticket.scannedAt).toLocaleString()}</span>
                        </div>
                        ` : ''}
                    </div>
                    ${!ticket.isScanned ? `
                    <div class="scan-actions">
                        <button class="btn btn-success" onclick="scanTicket(${ticket.ticketId})">
                            <i class="bi bi-check-circle"></i> Mark as Scanned
                        </button>
                    </div>
                    ` : ''}
                </div>
            `;
            
            resultsDiv.style.display = 'block';
        }

        function displayErrorResult(message) {
            const resultsDiv = document.getElementById('scanResults');
            const resultContent = document.getElementById('resultContent');
            
            resultContent.innerHTML = `
                <div class="error-info">
                    <div class="error-status">
                        <i class="bi bi-exclamation-triangle-fill text-danger"></i>
                        <span>Invalid Ticket</span>
                    </div>
                    <div class="error-message">
                        <p>${message}</p>
                    </div>
                </div>
            `;
            
            resultsDiv.style.display = 'block';
        }

        async function scanTicket(ticketId) {
            try {
                const response = await fetch(`/api/qr/scan/${ticketId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Ticket scanned successfully', 'success');
                    // Refresh the result display
                    setTimeout(() => {
                        document.getElementById('qrCodeInput').value = '';
                        document.getElementById('scanResults').style.display = 'none';
                    }, 2000);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('Error scanning ticket:', error);
                showToast('Error scanning ticket', 'error');
            }
        }

        function showToast(message, type) {
            const toastMessage = document.getElementById('toastMessage');
            const toastHeader = document.querySelector('.toast-header i');
            
            toastMessage.textContent = message;
            
            if (type === 'success') {
                toastHeader.className = 'bi bi-check-circle-fill text-success me-2';
            } else if (type === 'error') {
                toastHeader.className = 'bi bi-exclamation-triangle-fill text-danger me-2';
            } else {
                toastHeader.className = 'bi bi-info-circle text-primary me-2';
            }
            
            scanToast.show();
        }

        function addToRecentScans(qrCode, ticket) {
            const scan = {
                qrCode: qrCode,
                ticketId: ticket.ticketId,
                eventTitle: ticket.eventTitle,
                isScanned: ticket.isScanned,
                scannedAt: new Date().toISOString()
            };
            
            recentScans.unshift(scan);
            recentScans = recentScans.slice(0, 10); // Keep only last 10 scans
            
            localStorage.setItem('recentScans', JSON.stringify(recentScans));
            loadRecentScans();
        }

        function loadRecentScans() {
            const recentScansList = document.getElementById('recentScansList');
            
            if (recentScans.length === 0) {
                recentScansList.innerHTML = '<p class="text-muted">No recent scans</p>';
                return;
            }
            
            recentScansList.innerHTML = recentScans.map(scan => `
                <div class="recent-scan-item">
                    <div class="scan-info">
                        <div class="scan-event">${scan.eventTitle}</div>
                        <div class="scan-details">
                            <span class="scan-id">Ticket #${scan.ticketId}</span>
                            <span class="scan-time">${new Date(scan.scannedAt).toLocaleTimeString()}</span>
                        </div>
                    </div>
                    <div class="scan-status">
                        <i class="bi ${scan.isScanned ? 'bi-check-circle-fill text-success' : 'bi-clock text-warning'}"></i>
                    </div>
                </div>
            `).join('');
        }

        // Camera functionality
        async function startCamera() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        facingMode: 'environment' // Use back camera if available
                    } 
                });
                
                video.srcObject = stream;
                video.style.display = 'block';
                document.getElementById('cameraPlaceholder').style.display = 'none';
                document.getElementById('startCameraBtn').style.display = 'none';
                document.getElementById('stopCameraBtn').style.display = 'inline-block';
                
                isScanning = true;
                scanForQRCode();
            } catch (error) {
                console.error('Error accessing camera:', error);
                showToast('Camera access denied or not available', 'error');
            }
        }

        function stopCamera() {
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
                video.srcObject = null;
            }
            
            video.style.display = 'none';
            document.getElementById('cameraPlaceholder').style.display = 'block';
            document.getElementById('startCameraBtn').style.display = 'inline-block';
            document.getElementById('stopCameraBtn').style.display = 'none';
            
            isScanning = false;
        }

        function scanForQRCode() {
            if (!isScanning) return;

            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                canvas.height = video.videoHeight;
                canvas.width = video.videoWidth;
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height);
                
                if (code) {
                    document.getElementById('qrCodeInput').value = code.data;
                    validateQRCode();
                    stopCamera();
                }
            }
            
            requestAnimationFrame(scanForQRCode);
        }
    </script>
}
